# Script to call lbfcs.pickprops
# Sets input parameters and defines path to data
#
############################################################# Set parameters
conc=[5] # Imager concentration [nM]
ignore=1 # Ignore_dark value for qPAINT analysis
savename_ext='_props_ig%i'%(ignore) # File extension for processed file

#### Advanced 
omit_dist=True # If True all lists will be excluded for saving (recommended) 
kin_filter=True # If True automatic filtering will be applied (recommended)
NoPartitions=30 # Number of partitions for dask parallel computing

#### Dictonary content for .yaml file
props_info={'Generated by':'pickprops.get_props',
            'ignore':ignore,
            'omit_dist':omit_dist,
            'kin_filter': kin_filter}

############################################################## Define data
dir_names=[]
dir_names.extend(['/fs/pool/pool-schwille-paint/Data/p04.lb-FCS/19-06-18_N=48/id114_5nM_p35uW_control_1/19-06-18_FS'])

file_names=[]
file_names.extend(['id114_5nM_p35uW_control_1_MMStack_Pos0.ome_locs_render_picked.hdf5']) 

#################################################### Load packages
import os #platform independent paths
import importlib
# Load user defined functions
import lbfcs.pickprops as props
import lbfcs.io as io
import lbfcs.pickprops_calls as props_call
# Reload modules
importlib.reload(props)
importlib.reload(props_call)
#%%
############################################################# Read locs, apply props & save locs
######### Create list of paths
path=[os.path.join(dir_names[i],file_names[i]) for i in range(0,len(file_names))]

######### Read-Apply-Save loop
for i in range(0,len(path)):
    #### File read in
    locs,locs_info=io.load_locs(path[i])
    
    #### Get number of frames
    NoFrames=locs_info[0]['Frames']
    
    #### Apply non-parallelized props
#    locs_props=props.apply_props(locs,conc[i],NoFrames,ignore)
    
    #### Apply parallelized props
    locs_props=props.apply_props_dask(locs,conc[i],NoFrames,ignore,NoPartitions)
    
    #### Drop objects for saving if omit=True
    if omit_dist:
        print('... removing distribution-lists from output')
        locs_props=locs_props.drop(['trace','tau','g','tau_b_dist','tau_d_dist'],axis=1)
    
    if kin_filter:
        print('... applying kinetic filter')
        locs_props=props._kin_filter(locs_props)
    
    #### Add nearest neigbour pick and distance
    print('... calculating nearest neighbour')
    locs_props=props_call.props_add_nn(locs_props)
    
    #### Save .hdf5 and .yaml of locs_props    
    io.save_locs(path[i].replace('.hdf5',savename_ext+'.hdf5'),
                    locs_props,
                    [locs_info,props_info],
                    mode='picasso_compatible')
