import pandas as pd
import h5py

#%%
def load_locs(path):
    """
    Returns localization .hdf5 from picasso as pandas.DataFrame and corresponding .yaml as list of dictionaries.
    
    Parameters
    ---------
    readpath : str
        Path to .hdf5 file as generated by Picasso   
    Returns
    -------
    locs : pandas.DataFrame
        Localization list stored under 'locs' in .hdf5 file
    locs_info : list
        list of dictionaries contained in .yaml corresponding to .hdf5 file
    """
    
    with pd.HDFStore(path,'r') as store:
        locs=store['locs']
        
    ### Get corresponding .yaml file
    from picasso.io import load_info as load_info
    info=load_info(path)
    
    return locs,info

#%%
def save_locs(path,locs,info,mode=None):
    """
    Save processed df of locs file belonging to origin_path in .hdf5 file and corresponding list of dictionaries in .yaml file.
    
    Parameters
    ---------
    locs: pandas.DataFrame
        locs (as in picasso) but converted to pd.DataFrame format
    info: list(dict1,dict2,...)
        List of dictionaries belonging to locs, will be stored in .yaml
    path : str
        Path in which locs are stored
    mode: str
        If mode='picasso_compatible' locs will be stored as np.rec_array to be readable with picasso.filter module
    """
    
    if mode=='picasso_compatible':
        locs_rec=locs.to_records(index=False) # Convert to rec_array  
        with h5py.File(path, "w") as store:
            store.create_dataset("locs", data=locs_rec)
    else:
        with pd.HDFStore(path,'w') as store:
            store.put('locs', locs, format='fixed')
 
    ### Save info in .yaml
    from picasso.io import save_info as save_info
    save_info(path.replace('.hdf5','.yaml'),
              info,
              default_flow_style=False)
    
    return
